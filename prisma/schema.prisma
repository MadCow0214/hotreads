model User {
    id              String      @id @default(uuid())
    nickName        String?     @unique
    email           String      @unique
    avatar          String?
    password        String
    verifyCode      String?
    uploadedBooks   Book[]      @relation(name:"uploaderRelation")
    wantedBooks     Book[]      @relation(name:"wantedRelation")
    reviews         Review[]
}

model Book {
    id              String      @id @default(uuid())
    title           String      @unique
    subtitle        String?
    category        Int
    author          Author?      @relation(fields: [authorId], references: [id])
    authorId        String?
    company         String?
    image           String?
    desc            String?     @db.VarChar(8192)
    publishDate     DateTime    @db.Date
    avgStar         Float       @default(0.0)
    wantedCount     Int         @default(0)
    createdAt       DateTime    @default(now())
    uploader        User?       @relation(name:"uploaderRelation", fields: [uploaderId], references: [id])
    uploaderId      String?
    wantedUsers     User[]      @relation(name:"wantedRelation")
    reviews         Review[]
}

model Author {
    id          String      @id @default(uuid())
    name        String      @unique
    desc        String?     @db.VarChar(8192)
    books       Book[]
}

model Review {
    id          String      @id @default(uuid())
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    book        Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId      String
    text        String?
    star        Int
    createdAt   DateTime    @default(now())
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}